---
apiVersion: v1
kind: List
metadata: {}
items:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: database
    labels:
      app: database
      template: postgresql-ephemeral-template
  data:
    POSTGRESQL_MAX_CONNECTIONS: "100"
- apiVersion: v1
  kind: Secret
  metadata:
    name: database
    labels:
      app: database
      template: postgresql-ephemeral-template
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
  stringData:
    database-name: database
    database-user: user
    database-password: password
    database-admin-password: postgres
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: database
    labels:
      app: database
      template: postgresql-ephemeral-template
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: database
    strategy:
      type: Recreate
    template:
      metadata:
        name: database
        labels:
          name: database
      spec:
        containers:
        - name: postgresql
          image: registry.ocp4.example.com:8443/rhel8/postgresql-13:1-7
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: database
          env:
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: database
                key: database-name
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: database
                key: database-user
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: database
                key: database-password
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: database
                key: database-admin-password
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: 1Gi
          # Warning: would violate PodSecurity "restricted:v1.24":
          #   allowPrivilegeEscalation != false (container "postgresql" must set securityContext.allowPrivilegeEscalation=false),
          #   unrestricted capabilities (container "postgresql" must set securityContext.capabilities.drop=["ALL"]),
          #   runAsNonRoot != true (pod or container "postgresql" must set securityContext.runAsNonRoot=true),
          #   seccompProfile (pod or container "postgresql" must set securityContext.seccompProfile.type to "RuntimeDefault" or "Localhost")
          capabilities: {}
          securityContext:
            privileged: false
            runAsNonRoot: true  # pod or container
            allowPrivilegeEscalation: false  # container
            seccompProfile:  # pod or container
              type: RuntimeDefault
            capabilities:  # pod
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: database-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: database-data
          emptyDir:
            medium: ""
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: database
    labels:
      app: database
      template: postgresql-ephemeral-template
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  spec:
    type: ClusterIP
    sessionAffinity: None
    selector:
      name: database
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
  status:
    loadBalancer: {}
